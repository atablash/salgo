dist: bionic
sudo: false
os: linux
language: cpp


git:
  depth: 1


addons:
  apt:
    sources:
      # FOR G++-7 BUILDS:
      #- ubuntu-toolchain-r-test

      # FOR libstdc++ BUILDS:
      #- ubuntu-toolchain-r-test # default libstdc++ in Ubuntu 14.04 is too old

    packages:
      # FOR ALL BUILDS:
      - libgoogle-glog-dev
      - libgflags-dev
      #- libgtest-dev # we'll compile our own, because it doesn't come with binaries anyway
      - libeigen3-dev
      #- autoconf # for compiling glog
      #- libtool # for compiling glog

      # FOR G++-7 BUILDS:
      #- g++-7

env:
  global:
    - DESTDIR="$(pwd)/INSTALL_ROOT"
    - CMAKE_PREFIX_PATH="$DESTDIR/usr/local"

    - BUILD_TYPE=Release

    - USE_LIBCXX=OFF

    # for libc++
    - CMAKE_INCLUDE_PATH="$CMAKE_PREFIX_PATH/include/c++/v1"
    - CMAKE_LIBRARY_PATH="$CMAKE_PREFIX_PATH/lib"

    # for libc++
    - CXX_FLAGS="-I$CMAKE_INCLUDE_PATH"
    - LD_FLAGS="-L$CMAKE_LIBRARY_PATH"

    # for running programs using libc++
    - LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$CMAKE_LIBRARY_PATH"






matrix:
  include:


    # g++  +  libstdc++
    - compiler: g++
      #env:
      #  - COMPILER_OVERRIDE="export CC=gcc-7 && export CXX=g++-7"

      addons:
        apt:
          packages:
            # FOR ALL BUILDS:
            - libgoogle-glog-dev
            - libgflags-dev
            - libeigen3-dev




    # clang++  +  libstdc++
    - compiler: clang++
      addons:
        apt:
          packages:
            # FOR ALL BUILDS:
            - libgoogle-glog-dev
            - libgflags-dev
            - libeigen3-dev



    # g++  +  libc++
    - compiler: g++
      env:
        - USE_LIBCXX=ON
        #- COMPILER_OVERRIDE="export CC=gcc-7 && export CXX=g++-7"
        - LD_FLAGS_LIBCXX="$LD_FLAGS -nodefaultlibs -lc++ -lc++abi -lc -lm -lgcc_s -lgcc" # for projects not supporting libc++

      addons:
        apt:
          packages:
            # FOR ALL BUILDS:
            - libgoogle-glog-dev
            - libgflags-dev
            - libeigen3-dev




    # clang++  +  libc++
    - compiler: clang++
      env:
        - USE_LIBCXX=ON

      addons:
        apt:
          packages:
            # FOR ALL BUILDS:
            - libgoogle-glog-dev
            - libgflags-dev
            - libeigen3-dev



    # g++  +  libstdc++    DEBUG
    - compiler: g++
      env:
        - BUILD_TYPE=Debug
        - CXX_FLAGS="$CXX_FLAGS -coverage" # compute coverage information
      addons:
        apt:
          packages:
            # FOR ALL BUILDS:
            - libgoogle-glog-dev
            - libgflags-dev
            - libeigen3-dev
      
      after_success:
        # codecov
        - gcov $(find test -name *.cpp | xargs)
        - bash <(curl -s https://codecov.io/bash)

        # codacy
        - CODACY_PROJECT_TOKEN=66907648526b42228da1f90f35066c3a bash <(curl -Ls https://coverage.codacy.com/get.sh)

        # coveralls
        - pip install --user cpp-coveralls
        - coveralls --exclude third-party --exclude samples --exclude bench --exclude CMakeFiles --exclude INSTALL_ROOT --exclude inst-gtest --exclude inst-benchmark --gcov-options '\-lp'






before_install:
#   - eval $COMPILER_OVERRIDE


install:
  - if [[ $USE_LIBCXX = ON ]]; then travis/install-libcxx.sh  &&  export CXX_FLAGS="$CXX_FLAGS -nostdinc++ -Wno-unused-command-line-argument"; fi

  # print libstdc++ and libc++ versions
  - /sbin/ldconfig -p | grep -E "libc\+\+|libstdc\+\+"

  # google benchmark (version from ubuntu 18.04 repo too old)
  # (links with std c++ lib)
  - (git clone https://github.com/google/benchmark.git inst-benchmark --branch v1.5.0 --depth 1    && cd inst-benchmark    && cmake . -DBENCHMARK_ENABLE_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_USE_LIBCXX=$USE_LIBCXX -DCMAKE_CXX_FLAGS="$CXX_FLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LD_FLAGS"    && make -j2    && make install)

  # gtest (the version from ubuntu repos is not compiled, only source)
  # (links with std c++ lib)
  - (git clone https://github.com/google/googletest.git inst-gtest --branch release-1.10.0 --depth 1    && cd inst-gtest    && cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LD_FLAGS $LD_FLAGS_LIBCXX"   && make -j2    && make install)


script:
  # build
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -D SALGO_BUILD_TESTS=ON -D SALGO_BUILD_BENCHMARKS=ON -D SALGO_BUILD_SAMPLES=ON -D SALGO_USE_LIBCXX=$USE_LIBCXX -DCMAKE_CXX_FLAGS="$CXX_FLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LD_FLAGS" .
  - make VERBOSE=1

  # run tests
  - (cd test && GTEST_COLOR=1 CTEST_OUTPUT_ON_FAILURE=1 make test)

  # run samples (Release only)
  - if [[ $BUILD_TYPE = Release ]]; then    (cd samples && GTEST_COLOR=1 CTEST_OUTPUT_ON_FAILURE=1 make test); fi

  # run benchmarks (Release only)
  - if [[ $BUILD_TYPE = Release ]]; then    bench/allocator &&    bench/vector &&    bench/list --benchmark_min_time=0.1 &&    bench/hash-table; fi


notifications:
  email: false
